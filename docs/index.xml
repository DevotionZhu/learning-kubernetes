<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes 学习笔记</title>
    <link>/learning-kubernetes/</link>
      <atom:link href="/learning-kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <description>Kubernetes 学习笔记</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><copyright>roc © 2021</copyright><lastBuildDate>Mon, 22 Feb 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/learning-kubernetes/images/logo_hu42c222176c22e108a51ae6c5f8d90768_31178_300x300_fit_lanczos_2.png</url>
      <title>Kubernetes 学习笔记</title>
      <link>/learning-kubernetes/</link>
    </image>
    
    <item>
      <title>HPA 相关问题</title>
      <link>/learning-kubernetes/faq/hpa.html</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/learning-kubernetes/faq/hpa.html</guid>
      <description>&lt;h2 id=&#34;container-负载不均不扩容&#34;&gt;container 负载不均不扩容&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问题描述:&lt;/strong&gt; K8S HPA 算法是按照 Pod 中所有 container 的资源使用平均值来算的，如果 Pod 中有多个 container，它们的资源使用相差较大，可能导致某个 container 高负载了还不扩容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景举例:&lt;/strong&gt; istio 场景下，Pod 中有业务 container 和 sidecar container，如果业务 container 的 cpu 100%，而 sidecar container 的 CPU 0%，它们平均下来就是 50%，当 HPA 指定的是 CPU 60% 扩容，这种情况下不会扩容，导致业务高负载还不扩容，影响线上业务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 VPA 根据 container 实际使用的资源大小来动态调整 container 的 request/limit，使得 HPA 计算出来的平均值能够比较客观反映 Pod 整体负载情况。&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&#34;../kep/container-hpa.html&#34;&gt;Container HPA&lt;/a&gt; 特性，让 HPA 计算时更加 &amp;ldquo;聪明&amp;rdquo; 一点。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Sidecar Containers</title>
      <link>/learning-kubernetes/kep/sidecar-containers.html</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/learning-kubernetes/kep/sidecar-containers.html</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;K8S 中 Pod 如果有多个 container，正常情况会同时启动或销毁，但有些场景对容器启动或销毁顺序有依赖，就可能存在一些问题，比如在 istio 场景中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod 启动时: 业务容器比 istio-proxy 先 ready。容器化过渡的应用，业务容器启动时需要调用其它服务(比如从配置中心拉取配置)，如果失败就退出，没有重试逻辑，而当 envoy 启动更慢时，业务容器调用其它服务失败，导致 pod 启动失败，如此循环 (参考 k8s issue &lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/65502&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#65502&lt;/a&gt; ) 。&lt;/li&gt;
&lt;li&gt;Pod 销毁时: 业务容器和 envoy 同时收到 SIGTERM，envoy 不再处理增量连接，但业务容器在 graceful shutdown 过程中可能需要调用另外的服务（比如通知其它清理进行清理操作)，这时候 envoy 就拒绝掉新的请求，导致调用失败 (参考 istio issue &lt;a href=&#34;https://github.com/istio/istio/issues/7136&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#7136&lt;/a&gt; )。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;规避方法后续整理 &lt;a href=&#34;imroc.io/learning-istio/&#34;&gt;istio 学习笔记&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;发起提案&#34;&gt;发起提案&lt;/h2&gt;
&lt;p&gt;社区很多人也都遇到了类似的问题，开始有人提出 Proposal 来解决:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 2018-05， &lt;a href=&#34;https://github.com/Joseph-Irving&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Joseph Irving&lt;/a&gt; 发起 Sidecar Containers 的 &lt;a href=&#34;https://github.com/kubernetes/community/pull/2148&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KEP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;随后在 2018-11 KEP 被&lt;a href=&#34;https://github.com/kubernetes/community/pull/2148#issuecomment-442991599&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;接受&lt;/a&gt; 。&lt;/li&gt;
&lt;li&gt;接着在 2019-01 作者又新开了 issue &lt;a href=&#34;https://github.com/kubernetes/enhancements/issues/753&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#753&lt;/a&gt; 来跟进这个特性的进展。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;提案被废弃&#34;&gt;提案被废弃&lt;/h2&gt;
&lt;p&gt;经过两年的设计与开发，在 2020-10 社区意见出现分歧，最终宣布该 KEP 被废弃，见作者的 &lt;a href=&#34;https://github.com/kubernetes/enhancements/issues/753#issuecomment-713471597&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;评论&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;还有文章闹过乌龙，称 1.18 会支持 sidecar 特性: &lt;a href=&#34;https://banzaicloud.com/blog/k8s-sidecars/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidecar container lifecycle changes in Kubernetes 1.18
&lt;/a&gt; ，但事实证明最终没有，并且最终被废弃了。&lt;/p&gt;
&lt;h2 id=&#34;原因总结&#34;&gt;原因总结&lt;/h2&gt;
&lt;p&gt;总结一下原因就是，很多相关问题都是与 pod 生命周期管理有关，涉及很多场景，不仅仅是局限于一两个场景。 我们不能给每种场景都搞一个特性去解决，而是需要由一个能够从更高的高度解决所有问题的新提案来解决。&lt;/p&gt;
&lt;h2 id=&#34;讨论新提案&#34;&gt;讨论新提案&lt;/h2&gt;
&lt;p&gt;随后，社区发起了 sidecar 相关场景与要求的搜集 &lt;a href=&#34;https://docs.google.com/document/d/1Drw9C_Ljpcr4X9UPLvms1fn8uMRnTfJLb-xipgX4C1M/edit#heading=h.1kqwby7migh2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidecar use cases/requirements&lt;/a&gt; ，比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Job 运行完毕退出，但 istio sidecar 不会退出，导致 Job 永不退出 (Job 需要等所有 container 停止才算退出)&lt;/li&gt;
&lt;li&gt;升级 sidecar 版本会重启所有 Pod，对大集群不友好，能够支持单个 container 升级就好了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后在 2020-11，Tim Hockin (K8S首席) 发起新 &lt;a href=&#34;https://docs.google.com/document/d/1Q3685Ic2WV7jPo9vpmirZL1zLVJU91zd3_p_aFDPcS0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Proposal&lt;/a&gt; 草稿。&lt;/p&gt;
&lt;h2 id=&#34;最新进展&#34;&gt;最新进展&lt;/h2&gt;
&lt;p&gt;然后就没有然后了，最近也没发现什么跟这个特性相关的动静，可能是要覆盖众多场景，就需要更复杂的设计，就没那么快能想好&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Container HPA</title>
      <link>/learning-kubernetes/kep/container-hpa.html</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/learning-kubernetes/kep/container-hpa.html</guid>
      <description>&lt;h2 id=&#34;历史&#34;&gt;历史&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2019-12-17: &lt;a href=&#34;https://github.com/arjunrn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Arjun Naik&lt;/a&gt; 提出 issue &lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/86349&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#86349&lt;/a&gt; 。&lt;/li&gt;
&lt;li&gt;2020-03-11: 提出 KEP &lt;a href=&#34;https://github.com/kubernetes/enhancements/pull/1609&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PR #1609&lt;/a&gt; ；发起 issue &lt;a href=&#34;https://github.com/kubernetes/enhancements/issues/1610&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#1610&lt;/a&gt; 来跟进此特性。&lt;/li&gt;
&lt;li&gt;2020-04-03: KEP &lt;a href=&#34;https://github.com/kubernetes/enhancements/pull/1609&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#1609&lt;/a&gt; 被接受。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进展&#34;&gt;进展&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;规划在 1.19 进入 alpha，但最终未能实现完，还没合入，见 &lt;a href=&#34;https://github.com/kubernetes/enhancements/issues/1610#issuecomment-631216704&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;有望在 1.20 合入，进入 alpha，见 &lt;a href=&#34;https://github.com/kubernetes/enhancements/issues/1610#issuecomment-691667871&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;comment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;特性跟踪 issue: &lt;a href=&#34;https://github.com/kubernetes/enhancements/issues/1610&#34;&gt;https://github.com/kubernetes/enhancements/issues/1610&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;KEP 文档: &lt;a href=&#34;https://github.com/kubernetes/enhancements/tree/master/keps/sig-autoscaling/1610-container-resource-autoscaling&#34;&gt;https://github.com/kubernetes/enhancements/tree/master/keps/sig-autoscaling/1610-container-resource-autoscaling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
